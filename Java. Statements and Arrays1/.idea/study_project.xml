<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <StepikCourse>
          <option name="authors">
            <list />
          </option>
          <option name="compatible" value="false" />
          <option name="courseMode" value="Study" />
          <option name="createDate" value="1521280395000" />
          <option name="customPresentableName" />
          <option name="description" value="This is an introductory course to Java. Join the course for a basic introduction into the language, to learn about statements and arrays, and to practice using them in Java programs. &#10;&#10;For those of you who are just starting out on your learning journey, we recommend you do the “Java. Introduction” course first." />
          <option name="environment" value="" />
          <option name="id" value="6859" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="name" value="Java. Statements and Arrays" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="13467" />
            </list>
          </option>
          <option name="type" value="pycharm11 JAVA" />
          <option name="updateDate" value="1522434368000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77893" />
                <option name="index" value="1" />
                <option name="name" value="Conditional statements" />
                <option name="updateDate" value="1522251827000" />
                <option name="unitId" value="54745" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;What is a conditional statement&lt;b&gt;?&lt;br&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;p&gt;&lt;b&gt;A conditional statement&lt;/b&gt; is a construct that allows a program to perform different computations depending on a boolean condition. If the condition is &lt;code&gt;true&lt;/code&gt;, the program performs one computation; otherwise, the condition is &lt;code&gt;false&lt;/code&gt; and the program performs another computation. The condition can be any boolean expression, for instance: &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;i - j == 1&lt;/code&gt; and so on.&lt;/p&gt;&#10;  &lt;p&gt;There are three types of conditional statements. We will give examples of all of them.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;A single if statement&lt;/h2&gt;&#10;  &lt;p&gt;The simplest form of the conditional statement is the following:&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;if (condition) {&#10;&amp;nbsp; &amp;nbsp; // do something&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;In this case, if the condition is true, the action inside the code block is executed. Otherwise, the program skips the action.&lt;/p&gt;&#10;  &lt;p&gt;See the following example.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int age = ...; // it has a value&#10;if (age &amp;lt; 3) {&#10;&amp;nbsp; &amp;nbsp; System.out.println(&quot;This person is too young&quot;);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;In this example, if the age is less than 3, the program prints &lt;b&gt;&quot;This person is too young&quot;&lt;/b&gt;.&lt;b&gt; &lt;/b&gt;O&lt;b&gt;&lt;/b&gt;therwise, it does nothing.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;If-else statement&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;The if statement can also be extended to do something &lt;em&gt;&lt;/em&gt;&lt;i&gt;else &lt;/i&gt;if the condition is false.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;if (condition) {  &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; // do something&#10;} else {&#10;&amp;nbsp; &amp;nbsp; // do something else&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;In the above code, if the condition is &quot;true&quot;, the first code block is executed. Otherwise, the second code block is executed.&lt;/p&gt;&#10;  &lt;p&gt;In the example below, the program outputs different text depending on the value of &lt;b&gt;num&lt;/b&gt; (even or odd). Note that a whole number is even if it can be divided evenly by 2; otherwise, it's odd.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int num = ...; // num is assigned some value&#10;if (num % 2 == 0) {&#10;    System.out.println(&quot;It's an even number&quot;);&#10;} else {    &#10;    System.out.println(&quot;It's an odd number&quot;);&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt; For example, if the value of num is 10, the program outputs &quot;It's an even number&quot;. If the value is 11, it outputs &quot;It's an odd number&quot;.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;If-else-if statements&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;The most general form of the if-else statement consists of multiple conditions and else-branches.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;if (condition0) {&#10;    // do something&#10;} else if (condition1) {&#10;    // do something else 1&#10;// ...&#10;} else if (conditionN) {&#10;    // do something else N&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;br&gt;The following code outputs recommendations as to what type of computer you should buy depending on your budget.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;long dollars = ...; // your budget&#10;if (dollars &amp;lt; 1000) {&#10;    System.out.println(&quot;Buy a laptop&quot;);&#10;} else if (dollars &amp;lt; 2000) {&#10;    System.out.println(&quot;Buy a personal computer&quot;);&#10;} else if (dollars &amp;lt; 100000) {&#10;    System.out.println(&quot;Buy a server&quot;);&#10;} else {&#10;    System.out.println(&quot;Buy a data center or a quantum computer&quot;);&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   This conditional statement has four branches: dollars &amp;lt; 1000, dollars &amp;lt; 2000, dollars &amp;lt; 100000 and dollars &amp;gt;= 100000.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   For eample, if the value of dollars is 9000, it prints &#10;   &lt;b&gt;&quot;Buy a server&quot;&lt;/b&gt;.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294310" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522249895000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Write a program that reads a number and prints &#10;  &lt;b&gt;YES&lt;/b&gt; if it is positive. Otherwise, the program should print &#10;  &lt;b&gt;NO&lt;/b&gt;.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;YES&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294318" />
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522187015000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given three natural numbers A, B, and C, determine if there exists a triangle with side lengths equal to these numbers. If such a triangle exists, output &lt;b&gt;YES&lt;/b&gt;; otherwise, output &lt;b&gt;NO&lt;/b&gt;.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Hint:&lt;/b&gt; In any triangle, no side can be greater than or equal to the sum of the other two sides.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;YES&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294319" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522250619000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given an integer, output &lt;b&gt;True &lt;/b&gt;if its value is within the interval (−15,12]∪(14,17)∪[19,+∞). Otherwise, output &lt;b&gt;False &lt;/b&gt;(case-sensitive).&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt; Please note the different parentheses and brackets used to specify open and semi-open intervals. For more information about this notation, please see&amp;nbsp; &lt;a href=&quot;https://en.wikipedia.org/wiki/Interval_(mathematics)#Including_or_excluding_endpoints&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Wikipedia&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;20&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;True&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294320" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522250574000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given a four-digit number, determine whether its decimal notation is a palindrome (i.e. its notation is symmetrical; see the samples below). If the number is a palindrome, output 1; otherwise, output any other integer. If the number has fewer than four digits, assume that its decimal notation has leading zero(s) for a total of four digits. For example, treat 330 as 0330.&#10;  &lt;br&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2002&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2008&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;37&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 1s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294317" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522250709000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given a year, find out if it is a leap year.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;As a reminder, leap years are those divisible by 4 but not by 100, as well as those divisible by 400. For example, 2000 was a leap year, but 2100 will be a regular year. &lt;/p&gt;&#10;  &lt;p&gt;The program should work correctly for years 1900 ≤ n ≤ 3000.&lt;/p&gt;&#10;  &lt;p&gt;Output &lt;b&gt;Leap&lt;/b&gt; (case-sensitive) if the given year is a leap year, and &lt;b&gt;Regular &lt;/b&gt;otherwise.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2100&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Regular&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Leap&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294324" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522250929000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   Given coordinates of two queens on a chessboard, determine if they are attacking each other or not. (A chess queen attacks in three ways: along its rank, in both directions; along its file, in both directions, and diagonally in all four directions.)&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    &lt;b&gt;&lt;br&gt;&lt;/b&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;b&gt;Input data format&lt;/b&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    User inputs two pairs of integer coordinates: &#10;    &lt;span class=&quot;math-tex&quot;&gt;\( x_1, y_1, x_2, y_2 \)&lt;/span&gt;, all in the interval [1,8].&#10;    &lt;b&gt;&lt;br&gt;&lt;/b&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;b&gt;Output data format&lt;/b&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    Type &quot;YES&quot; (uppercase) if the two queens are attacking each other, or &quot;NO&quot; if they don't.&#10;    &lt;b&gt;&lt;br&gt;&lt;/b&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt; &#10;    &lt;p&gt;Hint: You may need to use the following method, which calculates the absolute value of a number:&lt;/p&gt; &#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Math.abs(n)&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 1 3 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;YES&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294325" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522251142000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;Healthy sleep&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Ann watched a TV program about health and learned that it is recommended to sleep at least &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; hours per day, but oversleeping is also not healthy and you should not sleep more than &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; hours.&lt;/p&gt;&#10;  &lt;p&gt;Now Ann sleeps &lt;span class=&quot;math-tex&quot;&gt;\( H \)&lt;/span&gt; hours per day. Determine if her sleep schedule complies with the requirements of that TV program. If it does, print &lt;b&gt;Normal&lt;/b&gt;. If Ann sleeps fewer than &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; hours, output &lt;b&gt;Deficiency&lt;/b&gt;. If she sleeps more than &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; hours, output &lt;b&gt;Excess&lt;/b&gt;.&lt;/p&gt; &#10;  &lt;p&gt;User inputs three strings with variables in the following order: &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\( H \)&lt;/span&gt;. &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; is always less than or equal to &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Please note the output should exactly correspond to what is required in the problem, including case-sensitivity. For example, output such as &quot;excess&quot;, &quot;EXCESS&quot;, &quot;ExCeSs&quot; and others will not be graded as correct.&lt;/p&gt; &#10;  &lt;p&gt;Think carefully about all the conditions you need to use. Pay special attention to the strictness of the conditional operators you use: distinguish between &amp;lt; and ≤; &amp;gt; and ≥. To understand which ones to use, re-read the problem if necessary.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;10&lt;br&gt;8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Normal&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294330" />
                      <option name="index" value="8" />
                      <option name="name" value="Programming (6)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522251451000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;&lt;/span&gt; &lt;/p&gt;&#10;  &lt;p&gt;A chocolate bar has a rectangular shape, divided into NxM segments. You can break down this chocolate bar into two parts by a single straight line (only once). Determine if you can break off exactly K segments of chocolate. (Each segment is 1x1.)&lt;/p&gt; &#10;  &lt;span&gt;&lt;/span&gt;&#10;  &lt;b&gt;Input data format&lt;/b&gt; &#10;  &lt;p&gt;User inputs three integers: N, M, K.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;The program must output one of the two words: &lt;code&gt;YES&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;2&lt;br&gt;6&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;YES&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294331" />
                      <option name="index" value="9" />
                      <option name="name" value="Programming (7)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522251678000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&lt;/div&gt; &#10;  &lt;p&gt;In a computer game, a player has an army of units. Write a program that will classify the player's army according to the following rules: &lt;/p&gt;&#10;  &lt;div&gt;&lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Total units: Category&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   fewer than 1: no army&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 1 to 4: few&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 5 to 9: several&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 10 to 19: pack&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 20 to 49: lots&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 50 to 99: horde&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 100 to 249: throng&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 250 to 499: swarm&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   from 500 to 999: zounds&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   1000 or more: legion&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   User inputs the number of units. The program outputs the corresponding category.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;several&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294332" />
                      <option name="index" value="10" />
                      <option name="name" value="Programming (8)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522251827000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77903" />
                <option name="index" value="2" />
                <option name="name" value="Switch statements" />
                <option name="updateDate" value="1522434368000" />
                <option name="unitId" value="54755" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Three keywords: switch, case and default&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;&lt;b&gt; The switch statement &lt;/b&gt;provides a way to choose between multiple cases based on the value of a single variable. The variable in this statement can be an integer number, character, string, or enumeration. We will study the last two types later.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;The most general form of the switch statement looks as follows:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;switch (variable) {&#10;    case value1:&#10;&amp;nbsp; &amp;nbsp;     // do something here&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; case value2:&#10;&amp;nbsp; &amp;nbsp;     // do something here&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; &#10;    //... other cases&#10;&amp;nbsp; &amp;nbsp; &#10;    case valueN:&#10;&amp;nbsp; &amp;nbsp;     // do something here&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp;   default:&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // do something by default&#10;}&#10;// next statement&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;The keywords &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; are always required. The keywords &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; are optional.&lt;/p&gt;&#10;  &lt;p&gt;Cases are evaluated sequentially. If a case is valid and it includes the &lt;code&gt;break&lt;/code&gt; keyword, the &lt;code&gt;switch&lt;/code&gt; construct is finished and execution passes to the next statement. If a case doesn't include the &lt;code&gt;break&lt;/code&gt; keyword, the following case(s) will be evaluated too.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;The &lt;code&gt;default&lt;/code&gt; case is only evaluated if no case matches the variable value.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;Example&lt;/h2&gt;&#10;  &lt;p&gt;Let's consider an example. The following code output the name of some integers or the default string. It has three base cases and one default case.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int val = ...; // the variable is assigned some value&#10;switch (val) {&#10;     case 0:&#10;&amp;nbsp; &amp;nbsp;     System.out.println(&quot;zero&quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;case 1:&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;   System.out.println(&quot;one&quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;case 2:&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(&quot;two&quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;default:&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;   System.out.println(&quot;The value is less than zero or greater than two&quot;);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;If &lt;code&gt;val&lt;/code&gt; equals 0, the code prints:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;zero&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;If &lt;code&gt;val&lt;/code&gt; is 1, the code prints:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;one&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;if &lt;code&gt;val&lt;/code&gt; is 10, the code prints:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;The value is less than zero or greater than two&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;If you happen to forget to include &lt;code&gt;break&lt;/code&gt;, the compiler will not consider it an error. Suppose we removed it from the second case (case 1) and assigned 1 to &lt;code&gt;val&lt;/code&gt;. The program would print:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;one&#10;two&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;However, missing &lt;code&gt;breaks&lt;/code&gt; is not a good practice. Try to avoid it.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294333" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522258674000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads the number of a shape (1 – square, 2 – circle, 3 – triangle, 4 – rhombus) and prints &lt;b&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;You have chosen a square&lt;/span&gt;&lt;/b&gt; (or circle, or triangle, or rhombus, depending on the number). If the number does not correspond to any of the listed shapes, the program should output, &lt;b&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;There is no such shape!&lt;/span&gt;&lt;/b&gt;.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: #ff4363;&quot;&gt;Note&lt;/span&gt;:&lt;/b&gt; Please make sure your output &lt;b&gt;exactly&lt;/b&gt; matches the required string, including capitals, spaces, and punctuation marks.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;You have chosen a square&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294339" />
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522434368000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Write a program that reads the number of the direction (1 – up, 2 – down, 3 – left, 4 – right, 0 – &lt;/span&gt;stay&lt;span&gt;) and outputs &lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&lt;b&gt;move up&lt;/b&gt;&lt;/span&gt;&lt;span&gt; (or &quot;move down&quot;, or &quot;move left&quot;, or &quot;move right&quot;, or &quot;stay&quot; depending on the entered number). If the number does not correspond to any of the listed directions, the program should &lt;/span&gt;output &lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;&lt;b&gt;error!&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: #ff4363;&quot;&gt;Note&lt;/span&gt;:&lt;/b&gt; Please make sure your output &lt;b&gt;exactly&lt;/b&gt; matches the required string, including capitals, spaces, and punctuation marks.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;move up&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294343" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522335448000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;A simple calculator&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt; Write a simple calculator that reads three values from a line: the first number, the operator, and the second number, separated by single spaces.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt; The program should apply the operation to the entered numbers and output the numerical result to the screen. Note that the numbers are long.&lt;/p&gt;&#10;  &lt;p&gt;The calculator should support the following operations / operators:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;addition: &quot;+&quot;&lt;/li&gt;&#10;   &lt;li&gt;subtraction: &quot;-&quot;&lt;/li&gt;&#10;   &lt;li&gt;integer division: &quot;/&quot;&lt;/li&gt;&#10;   &lt;li&gt;multiplication: &quot;*&quot;&lt;/li&gt;&#10;  &lt;/ul&gt; &#10;  &lt;p&gt;If division is requested and the second number is 0, output &lt;b&gt;Division by 0!&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;If no valid operator is present, output &lt;b&gt;Unknown operator&lt;/b&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Note: &lt;/b&gt;Consider using the switch statement in your solution.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;10000000000 + 20000000000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;30000000000&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294344" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522335485000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Residents of Decorastan often experiment with the arrangement of their rooms, which can be triangular, rectangular, or round. To help Decorastanians organize their floor space more efficiently, write a program that uses the room shape and the relevant dimensions as input and outputs the area of the room.&lt;/p&gt;&#10;  &lt;p&gt;Use the value of 3.14 instead of the number π.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Hint:&lt;/b&gt; Consider using the Math library.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt; &lt;b&gt;Input format used in Decorastan:&lt;/b&gt; &lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;triangle&#10;a&#10;b&#10;c&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;where a, b, and c are lengths of the sides of the triangle.&#10;  &lt;br&gt;&#10;  &lt;br&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;rectangle&#10;a&#10;b&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;where a and b are lengths of the sides of the rectangle.&#10;  &lt;br&gt;&#10;  &lt;br&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;circle&#10;r&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;where r is the radius of the circle.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Note:&lt;/b&gt; the input values (a, b, c, r) are &#10;   &lt;b&gt;doubles&lt;/b&gt;, and your output should be too.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;rectangle&lt;br&gt;4&lt;br&gt;10&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;40.0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294345" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522329729000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77904" />
                <option name="index" value="3" />
                <option name="name" value="While and do-while loops" />
                <option name="updateDate" value="1522337156000" />
                <option name="unitId" value="54756" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Java provides several kinds of loops for repeating a block of code while a certain condition is &lt;code&gt;true&lt;/code&gt;. In this topic, we will learn about two kinds of loops: &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;do-while&lt;/code&gt;. The difference between them is the order in which the body is executed and the condition is evaluated.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;The while loop&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;In a &lt;code&gt;while&lt;/code&gt; loop, the condition is tested first. The body is only executed if the condition is &lt;code&gt;true&lt;/code&gt;, and then the process repeats.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;The basic syntax of this loop is the following:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;while (condition) {&#10;&amp;nbsp; &amp;nbsp; // do something in the body&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The body of the loop may contain any valid Java statements, including conditional statements and even other loops (nested loops).&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;A loop becomes an infinite loop if the condition is always &lt;code&gt;true&lt;/code&gt;. For example,&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;while (true) {&#10;&amp;nbsp; &amp;nbsp; // infinite loop&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;b&gt;&lt;/b&gt;&#10;  &lt;p&gt;We will talk more about using infinite loops in later topics.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Example 1.&lt;/b&gt; The following loop prints consecutive integer numbers until reaching 5.&lt;/p&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;&#10;    &lt;div&gt;&lt;/div&gt;&lt;/b&gt;&#10;   &lt;div&gt;&lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int i = 0;&#10;while (i &amp;lt; 5) {&#10;    System.out.println(i);&#10;    i++;&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;b&gt;&#10;   &lt;div&gt;&lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&lt;/div&gt;&lt;/b&gt;&#10;  &lt;div&gt;&#10;   The output:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&lt;/div&gt;&#10;  &lt;div&gt;&lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;&lt;/b&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;0&#10;1&#10;2&#10;3&#10;4&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;b&gt;&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;b&gt;&#10;   &lt;div&gt;&lt;/div&gt;&lt;/b&gt;&#10;  &lt;p&gt;&lt;b&gt;Example 2. &lt;/b&gt;The following code prints the English alphabet in a single line.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;public class WhileDemo {&#10;&amp;nbsp; &amp;nbsp; public static void main(String[] args) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; char letter = 'A';&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while (letter &amp;lt;= 'Z') {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.print(letter);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; letter++;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; }&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Here's what's happening: the program takes the first character, &lt;b&gt;'A'&lt;/b&gt;,&lt;b&gt; &lt;/b&gt;and then repeats:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;if letter is less than or equal to &lt;b&gt;'Z'&lt;/b&gt;, the program goes to the loop body;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;inside the body, it prints the current value of letter and moves on to the next .&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;The output:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;br&gt;&#10;  &lt;b&gt;&lt;h2 style=&quot;text-align: center;&quot;&gt;The do-while loop&lt;br&gt;&lt;/h2&gt;&lt;/b&gt;&#10;  &lt;b&gt;&lt;/b&gt;&#10;  &lt;br&gt;In a &#10;  &lt;code&gt;do-while&lt;/code&gt; loop, the body is executed first and only then is the condition statement tested. Therefore, the body will be always executed at least once.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;   &lt;p&gt;The basic syntax of the loop is the following:&lt;br&gt;&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;do {&#10;&amp;nbsp; &amp;nbsp; // do something&#10;} while (condition);&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;The program below keeps reading integer numbers from standard input and outputting them. If 0 is entered, the program outputs it and stops.&lt;br&gt;&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code&gt;public class DoWhileDemo {&#10;&amp;nbsp; &amp;nbsp; public static void main(String[] args) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Scanner scanner = new Scanner(System.in);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int value;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; do {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value = scanner.nextInt();&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(value);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } while (value &amp;gt; 0);&#10;&amp;nbsp; &amp;nbsp; }&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;The input:&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code&gt;1 2 4 0 3&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;The output:&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code&gt;1&#10;2&#10;4&#10;0&lt;/code&gt;&lt;/pre&gt;Note that a &#10;   &lt;code&gt;do-while&lt;/code&gt; loop may become infinite, just like a &#10;   &lt;code&gt;while&lt;/code&gt; loop.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294334" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522335393000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that accepts, as input, a sequence of non-negative integers, each written on a separate line. When the program encounters 0, it should stop and output the total length of the sequence so far (not including the final 0).&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;Do not read any numbers following 0.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;7&lt;br&gt;9&lt;br&gt;0&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294354" />
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522335672000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given a sequence of natural numbers not exceeding 30000, find its maximum element that is divisible by 4. The input starts with the total number of elements in the sequence, and then lists the elements themselves. At least one number in the sequence is guaranteed to be divisible by 4. The total number of elements does not exceed 1000. The numbers may not be in order. The program should print a single number that is the maximum element of the sequence divisible by 4.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;10&lt;br&gt;63&lt;br&gt;26&lt;br&gt;39&lt;br&gt;12&lt;br&gt;16&lt;br&gt;36&lt;br&gt;11&lt;br&gt;74&lt;br&gt;62&lt;br&gt;61&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;36&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294348" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522335992000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given a sequence of integers ending with the number 0, find the sum of all its elements.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;The 0 serves as a terminating element and is not included in the sequence.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;6&lt;br&gt;8&lt;br&gt;0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;17&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294353" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522336417000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given an integer N, print all of the squares of natural numbers that do not exceed N, in ascending order.&#10;  &lt;br&gt;Note: the &#10;  &lt;b&gt;squares &lt;/b&gt;should not exceed N.&#10;  &lt;br&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;50&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;4&lt;br&gt;9&lt;br&gt;16&lt;br&gt;25&lt;br&gt;36&lt;br&gt;49&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294349" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522336529000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The user inputs a long number &lt;i&gt;&lt;b&gt;M&lt;/b&gt;&lt;/i&gt;. Find out the smallest long &lt;b&gt;&lt;i&gt;n&lt;/i&gt;&lt;/b&gt; such that &lt;b&gt;&lt;i&gt;n&lt;/i&gt;&lt;/b&gt;! &amp;gt; &lt;b&gt;&lt;i&gt;M&lt;/i&gt;&lt;/b&gt;.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Hint: For more about factorials, see this &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Wikipedia article&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6188989133&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;13&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294352" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522336788000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that prints a part of the sequence 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ..., in which each number is repeated as many times as its value. The input is a positive integer n – the number of the elements of the sequence that the program should print. The output should be written in a single line, with all numbers separated by single spaces.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 2 2 3 3 3 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294351" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522336972000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given a natural number &lt;b&gt;n&lt;/b&gt;, generate a sequence of integers described in the Collatz conjecture:&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;If &lt;b&gt;n&lt;/b&gt; is even, divide it in half. If it is odd, multiply it by &lt;b&gt;3&lt;/b&gt; and add &lt;b&gt;1&lt;/b&gt;. Repeat this operation until reaching &lt;b&gt;1&lt;/b&gt;.&lt;/p&gt; &#10;  &lt;p&gt;For example, if &lt;b&gt;n = 17&lt;/b&gt;, the sequence looks as follows:&lt;br&gt; &lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;17 52 26 13 40 20 10 5 16 8 4 2 1&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The conjecture states that such a sequence will eventually reach &lt;b&gt;1&lt;/b&gt; for any value of &lt;b&gt;n&lt;/b&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output format:&lt;br&gt;&lt;/b&gt;Sequence of integers in a single line, separated by single spaces.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;17&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;17 52 26 13 40 20 10 5 16 8 4 2 1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294350" />
                      <option name="index" value="8" />
                      <option name="name" value="Programming (6)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1522337155000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77905" />
                <option name="index" value="4" />
                <option name="name" value="For loop" />
                <option name="updateDate" value="1521291101000" />
                <option name="unitId" value="54757" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Sometimes, we need to repeat a block of code a certain number of times. Java provides the &lt;code&gt;for&lt;/code&gt;-loop that is very convenient for this purpose. This loop is often used to iterate over a range of values or an array. If the number of iteration or the range borders are known, it is recommended to use the &lt;code&gt;for&lt;/code&gt;-loop. If they are unknown the &lt;code&gt;while&lt;/code&gt;-loop may be a preferable solution.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;The base for-loop syntax&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt; This loop has the following base syntax:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;for (initialization; condition; increment/decrement) {&#10;    // do something&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The explanations:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;&lt;b&gt;the initialization statement&lt;/b&gt; is executed once when the loop begins, usually, here loop variables are initialized;&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;the condition&lt;/b&gt; determines the need for the next iteration; if it's false, the loop terminates;&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;the increment/decrement&lt;/b&gt; expression is invoked after each iteration of the loop; usually, here loop variables are changed.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;Inside the loop's body, the program can perform any correct java statements. It can even contain other loops.&lt;/p&gt;&#10;  &lt;p&gt;The order of execution for any for-loop is always the same:&lt;/p&gt;&#10;  &lt;ol&gt;&#10;   &lt;li&gt;the initialization statement;&lt;/li&gt;&#10;   &lt;li&gt;if the condition is false then terminate;&lt;/li&gt;&#10;   &lt;li&gt;the body&lt;/li&gt;&#10;   &lt;li&gt;the increment/decrement&lt;/li&gt;&#10;   &lt;li&gt;go to the stage 2 (condition).&lt;/li&gt;&#10;  &lt;/ol&gt;&#10;  &lt;p&gt;Let's write a loop for printing integer numbers from 0 to 9 in the same line.&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int n = 9;&#10;for (int i = 0; i &amp;lt;= n; i++) {&#10;    System.out.print(i + &quot; &quot;);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The code outputs:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The variable declared in the initialization expression is visible only inside the loop including the condition, the body and the increment/decrement expression. The integer loop's variables is often called i, j, k or index.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Another example.&lt;/b&gt; Let's calculate the sum of integer numbers from 1 to 10 (inclusive) using the for-loop.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int startIncl = 1, endExcl = 11;&#10;int sum = 0;&#10;for (int i = startIncl; i &amp;lt; endExcl; i++) {&#10;    sum += i;&#10;}&#10;System.out.println(sum); // it prints &quot;55&quot;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;Sometimes it's needed to declare a variable outside the loop. it's possible as well.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int i;&#10;for (i = 10; i &amp;gt; 0; i--) {&#10;    System.out.print(i + &quot; &quot;);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;Infinite for-loop&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;The initialization statement, the condition, and the increment/decrement expression are optional, the for loop may not have one or all of them.&lt;/p&gt;&#10;  &lt;p&gt;Moreover, it's possible to write an infinite loop:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;for (;;) {&#10;    // do something&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;Nested loops&lt;/h2&gt;&#10;  &lt;div&gt;&#10;   It's possible to nest one for-loop into another for-loop.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   For instance, the following code prints the multiplication table of numbers from 1 to 9 (inclusive).&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;for (int i = 1; i &amp;lt; 10; i++) {&#10;    for (int j = 1; j &amp;lt; 10; j++) {&#10;&amp;nbsp; &amp;nbsp;     System.out.print(i * j + &quot;\t&quot;);&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.println();&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   It outputs:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code&gt;1   2   3   4   5   6   7   8   9  &#10;2   4   6   8   10  12  14  16  18  &#10;3   6   9   12  15  18  21  24  27  &#10;4   8   12  16  20  24  28  32  36  &#10;5   10  15  20  25  30  35  40  45  &#10;6   12  18  24  30  36  42  48  54  &#10;7   14  21  28  35  42  49  56  63  &#10;8   16  24  32  40  48  56  64  72  &#10;9   18  27  36  45  54  63  72  81&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294335" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Print the sum of all integers from &#10;  &lt;b&gt;&lt;i&gt;a&lt;/i&gt;&lt;/b&gt; to &#10;  &lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt; (&#10;  &lt;b&gt;&lt;i&gt;a&lt;/i&gt;&lt;/b&gt; &amp;lt; &#10;  &lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt;).&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;18&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;156&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294362" />
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given the sequence of natural numbers. Find the sum of numbers, divisible by 6. The input is number of elements in the sequence, and then the elements themselves. In this sequence, there is always a number, divisible by 6.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;11&lt;br&gt;36&lt;br&gt;36&lt;br&gt;89&lt;br&gt;63&lt;br&gt;78&lt;br&gt;6&lt;br&gt;93&lt;br&gt;12&lt;br&gt;62&lt;br&gt;96&lt;br&gt;63&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;264&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294365" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given a sequence of natural numbers, not exceeding 30000. Find the its maximum element divisible by 4. As input, the program gets the number of elements in the sequence, and then the elements themselves. In the sequence, there is always an element divisible by 4. The number of elements does not exceed 1000. The program should print the single number – the maximum element of the sequence divisible by 4.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;9&lt;br&gt;12&lt;br&gt;56&lt;br&gt;16&lt;br&gt;36&lt;br&gt;52&lt;br&gt;17&lt;br&gt;24&lt;br&gt;80&lt;br&gt;5&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;80&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294361" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;The roots of equation&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Given the numbers &lt;span class=&quot;math-tex&quot;&gt;\( a, b, c, d \)&lt;/span&gt;. Output in ascending order all the integers between 0 and 1000, which are the roots of the equation &lt;span class=&quot;math-tex&quot;&gt;\( ax^3+bx^2+cx+d=0 \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;If the specified interval does not contain the roots of the equation, do not output anything.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-1&lt;br&gt;1&lt;br&gt;-1&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294368" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282497000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;Arithmetic average&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Write a program that reads two numbers &lt;span class=&quot;math-tex&quot;&gt;\( a \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( b \)&lt;/span&gt; from the keyboard, calculates and outputs to the console the arithmetic average of all numbers from the interval &lt;span class=&quot;math-tex&quot;&gt;\( [a; b] \)&lt;/span&gt;, which are divided by &lt;span class=&quot;math-tex&quot;&gt;\( 3 \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;In the example below the arithmetic average is calculated for the numbers on the interval &lt;span class=&quot;math-tex&quot;&gt;\( [-5; 12] \)&lt;/span&gt;. Total numbers divided by &lt;span class=&quot;math-tex&quot;&gt;\( 3 \)&lt;/span&gt; on this interval &lt;span class=&quot;math-tex&quot;&gt;\( 6 \)&lt;/span&gt;: &lt;span class=&quot;math-tex&quot;&gt;\( -3, 0, 3, 6, 9, 12 \)&lt;/span&gt;. Their arithmetic average equals to &lt;span class=&quot;math-tex&quot;&gt;\( 4.5 \)&lt;/span&gt; &lt;/p&gt; &#10;  &lt;p&gt;The program input contains intervals, which always contain at least one number, which is divided by &lt;span class=&quot;math-tex&quot;&gt;\( 3 \)&lt;/span&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;-5&lt;br&gt;12&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294364" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Find the number of &quot;Ds&quot;, &quot;Cs&quot;, &quot;Bs&quot; and &quot;As&quot; for the last test on informatics in the class consisting of &#10;  &lt;b&gt;&lt;i&gt;n&lt;/i&gt;&lt;/b&gt; students. The program gets number n as input, and then gets the grades themselves (one by one). The program should output four numbers in a single line - the number of &quot;D&quot;, the number of &quot;C&quot;, the number of &quot;B&quot; and the number of &quot;A&quot; grades.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;12&lt;br&gt;4&lt;br&gt;2&lt;br&gt;5&lt;br&gt;4&lt;br&gt;4&lt;br&gt;5&lt;br&gt;4&lt;br&gt;3&lt;br&gt;5&lt;br&gt;5&lt;br&gt;5&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 1 5 5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294366" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Fizz Buzz is a classic programming problem. Here is its slightly modified version.&lt;/p&gt; &#10;  &lt;p&gt;Write a program that takes the input of two integers: the beginning and the end of the interval (both numbers belong to the interval).&lt;/p&gt; &#10;  &lt;p&gt;The program should output the numbers from this interval, but if the number is divisible by 3, you should output Fizz instead of it, if the number is divisible by 5 - output Buzz, and if it is divisible both by 3 and by 5 - output FizzBuzz.&lt;/p&gt; &#10;  &lt;p&gt;Output each number or the word on a separate line.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8 16&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;Fizz&lt;br&gt;Buzz&lt;br&gt;11&lt;br&gt;Fizz&lt;br&gt;13&lt;br&gt;14&lt;br&gt;FizzBuzz&lt;br&gt;16&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294367" />
                      <option name="index" value="8" />
                      <option name="name" value="Programming (6)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;A detector compares the size of parts produced by a machine with the reference standard. &lt;/p&gt;&#10;  &lt;p&gt;If the size of the part is &lt;b&gt;larger&lt;/b&gt;, it can be sent to be fixed, and the detector prints the number 1.&lt;br&gt;If the size of the part is &lt;b&gt;smaller&lt;/b&gt;, it is removed as reject, and the detector prints the number -1.&lt;br&gt;If the part was made &lt;b&gt;perfect&lt;/b&gt;, it is sent to the box with ready products, and the detector prints 0.&lt;/p&gt;&#10;  &lt;p&gt;Write a program, which takes the number of parts &lt;b&gt;&lt;i&gt;n&lt;/i&gt;&lt;/b&gt; as input, and then the sequence of detector prints. The program should output numbers in a single line – the number of ready parts, the number of parts to be fixed, and the number of rejects.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;10&lt;br&gt;-1&lt;br&gt;0&lt;br&gt;1&lt;br&gt;0&lt;br&gt;0&lt;br&gt;1&lt;br&gt;1&lt;br&gt;-1&lt;br&gt;1&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4 4 2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294363" />
                      <option name="index" value="9" />
                      <option name="name" value="Programming (7)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282496000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77906" />
                <option name="index" value="5" />
                <option name="name" value="Branching statement" />
                <option name="updateDate" value="1521291107000" />
                <option name="unitId" value="54758" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Branching statements are used to change the standard behavior of loops: terminate a loop or skip some iterations.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;The break statement&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;p&gt;The break statement has two usages:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;it terminates the current loop (any kind) of any types (for, while, do-while);&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;it terminates a case in the &lt;b&gt;switch&lt;/b&gt; statement;&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;In this topic, we will learn the application of the &lt;b&gt;statement&lt;/b&gt; to terminate loops.&lt;/p&gt;&#10;  &lt;p&gt;Here is an example:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int i = 10;&#10;while(true) {&#10;    if (i == 0) {&#10;        break;&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; i--;&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;This loop will be successfully stopped, even though the condition is always &lt;b&gt;true&lt;/b&gt;.&lt;/p&gt;&#10;  &lt;p&gt;The &lt;b&gt;break&lt;/b&gt; statement terminates only the current loop. If this loop is inside another loop, the outer loop won't be stopped.&lt;/p&gt;&#10;  &lt;p&gt;The following code prints a ladder of numbers.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; 10; i++) {&#10;    for (int j = 0; j &amp;lt; 10; j++) {&#10;&amp;nbsp; &amp;nbsp;     System.out.print(j + &quot; &quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (i == j) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;     break;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.println();&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The break statement can't stop the outer loop (with variable i) and the code prints:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;0 &#10;0 1 &#10;0 1 2 &#10;0 1 2 3 &#10;0 1 2 3 4 &#10;0 1 2 3 4 5 &#10;0 1 2 3 4 5 6 &#10;0 1 2 3 4 5 6 7 &#10;0 1 2 3 4 5 6 7 8 &#10;0 1 2 3 4 5 6 7 8 9&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;To stop the outer loop we'd like to declare boolean variable &lt;b&gt;stopped &lt;/b&gt;and use it as a special flag.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;boolean stopped = false;&#10;for (int i = 0; (i &amp;lt; 10) &amp;amp;&amp;amp; !stopped; i++) {&#10;    for (int j = 0; j &amp;lt; 10; j++) {&#10;&amp;nbsp; &amp;nbsp;     System.out.print(j + &quot; &quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (i == j) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;     stopped = true;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp;}&#10;    System.out.println();&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Now, the program output is not the same.&lt;/p&gt;&#10;  &lt;p&gt;Also, another way to stop the outer loop exist - labeled break operator. But it's not very good practice to use it. Google it, if you are interested.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;The continue statement&lt;br&gt;&lt;/h2&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;/h2&gt;&#10;  &lt;div&gt;&#10;   It causes a loop to skip the current iteration and go to the next one.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   This statement also can be used inside any kinds of loops.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;ul&gt;&#10;    &lt;li&gt;inside the &lt;b&gt;for-loop&lt;/b&gt;, the continue cases control to immediately move to the increment/decrement statement;&lt;/li&gt;&#10;    &lt;li&gt;inside the &lt;b&gt;while&lt;/b&gt; or&lt;b&gt; do-while loop&lt;/b&gt;, control immediately move to the condition.&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   In the following example, the sequences of number are output. Odd numbers are skipped.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code&gt;int n = 10;&#10;for (int i = 0; i &amp;lt; n; i++) {&#10;    if (i % 2 != 0) {&#10;&amp;nbsp; &amp;nbsp;     continue;&#10;&amp;nbsp; &amp;nbsp; }&#10;    System.out.print(i + &quot; &quot;);&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The output:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;0 2 4 6 8&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The continue can't skip the current iteration of the outer loop.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Often, we can rewrite our loop without using the continue statement. Here is an example:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int n = 10;&#10;for (int i = 0; i &amp;lt; n; i++) { &#10;    if (i % 2 == 0) {&#10;&amp;nbsp; &amp;nbsp;     System.out.print(i + &quot; &quot;);&#10;&amp;nbsp; &amp;nbsp; } &#10;}&lt;/code&gt;&lt;/pre&gt; &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The result is the same as shown above but the code became shorter and more readable. Do not abuse &#10;   &lt;b&gt;branching statements&lt;/b&gt;.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294336" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282540000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="6 7 8 9 " />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="0 1 2 3 4 5 6 " />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="0 1 2 3 4 5 6 7 8 9 " />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="7 8 9 " />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="0 1 2 3 4 5 " />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;What is the output of the following code?&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int n = 10;&#10;for (int i = 0; i &amp;lt; n; i++) {&#10;    if (i * i &amp;lt; 36) {&#10;&amp;nbsp; &amp;nbsp;     continue;&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.print(i + &quot; &quot;);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294370" />
                      <option name="index" value="2" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list>
                          <option value="0" />
                        </list>
                      </option>
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282712000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given the sequence of natural numbers. For each number of the sequence output &quot;even&quot; if the number is even, otherwise - &quot;odd&quot;. If the number is equal to 0, the program must stop reading and processing numbers.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;A sequence of natural numbers, each number in a new line.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The sequence of words &quot;even&quot; and &quot;odd&quot;. Each word in a new line.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;odd&lt;br&gt;even&lt;br&gt;odd&lt;br&gt;even&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294371" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282712000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="a" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="b" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="c" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Choose two loops producing the same result.&lt;/p&gt;&#10;  &lt;p&gt;a)&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int i = 0;&#10;while(i &amp;lt; 10) {&#10;    System.out.print(i);&#10;&amp;nbsp; &amp;nbsp; if (i == 5) {&#10;&amp;nbsp; &amp;nbsp;     break;&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; i++;&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;b)&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int j = 0;&#10;while(j &amp;lt; 10) {&#10;    j++;&#10;&amp;nbsp; &amp;nbsp; if (j == 5) {&#10;&amp;nbsp; &amp;nbsp;     continue;&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.print(j);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;c)&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;for (int k = 0; k &amp;lt; 10; k++) {&#10;    if (k &amp;gt; 5) {&#10;&amp;nbsp; &amp;nbsp;     continue;&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.print(k);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294373" />
                      <option name="index" value="4" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282712000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="stop" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="break" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="terminate" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="continue" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="skip" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  What keyword is used to terminate a loop early?&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294372" />
                      <option name="index" value="5" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (2)" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521282712000" />
                    </ChoiceTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77921" />
                <option name="index" value="6" />
                <option name="name" value="Array" />
                <option name="updateDate" value="1521291114000" />
                <option name="unitId" value="54773" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  ﻿&#10;  &lt;p&gt;&lt;b&gt;Introduction to arrays&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;An array is an ordered collection of elements of the same type. It can store only a fixed number of elements. The length of an array is established when the array is created. Arrays allow you to group and processing similar data together.&lt;/p&gt;&#10;  &lt;p&gt;In the following picture, an array of five floating-point elements is presented.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;image-fullsize&quot; height=&quot;98&quot; src=&quot;https://ucarecdn.com/9e0f106a-e924-462c-8c8a-c02a9912c1a9/&quot; width=&quot;318&quot;&gt;&lt;/p&gt;&#10;  &lt;b&gt;An array of five floating-point elements&lt;/b&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;p&gt;Some features:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;an array is a reference type;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;all elements are stored in the memory sequentially ;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;each element of an array is accessed by its numerical index, the first element has the &lt;b&gt;index 0&lt;/b&gt;;&lt;/li&gt;&#10;   &lt;li&gt;the last element is accessed by the index equal to &lt;b&gt;array size - 1&lt;/b&gt;;&lt;/li&gt;&#10;   &lt;li&gt;it's possible to create an array of any types;&lt;/li&gt;&#10;   &lt;li&gt;the maximum size of an array is limited by the &lt;b&gt;Integer.MAX_VALUE&lt;/b&gt;;&lt;br&gt;&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;&lt;b&gt;Declaration, instantiation, initialization&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;To create an array filled with useful elements we should:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;declare a variable of an array type &lt;b&gt;(declaration); &lt;/b&gt;&lt;/li&gt;&#10;   &lt;li&gt;create an instance of the array object &lt;b&gt;(instantiation)&lt;/b&gt;;&lt;/li&gt;&#10;   &lt;li&gt;initialize the array by some values &lt;b&gt;(initialization)&lt;/b&gt;.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;div&gt;&#10;   To declare an array we must use two special characters &#10;   &lt;b&gt;[]&lt;/b&gt; after the name of the type of elements in the array:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] array; // declaration&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   or after the name of an array variable:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int array[]; // declaration&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Creating an array with the specified elements&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;Java provides several ways to create an array.&lt;/p&gt;&#10;   &lt;p&gt;The simplest way to instantiate and initialize an array is to enumerate all its elements:&lt;br&gt;&lt;/p&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] numbers = { 1, 2, 3, 4 }; // an array of 1, 2, 3, 4&lt;/code&gt;&lt;/pre&gt;But, this way to create an array has some disadvantages: we need to know values and number of elements at the moment of compilation.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Another way is to initialize an array using variables:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int a = ..., b = ..., c = ...;&#10;int[] numbers = { a, b, c };&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   In this case, we should have all elements at the moment of the array creation.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Creating an array using the keyword &quot;new&quot;&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The most general way to create an instance (object) of an array is to use the special keyword &#10;   &lt;b&gt;new &lt;/b&gt;and specify the necessary number of elements:&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int n = ...; // n is a length of an array&#10;int[] numbers = new int[n];&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;Now, the array has &lt;b&gt;n&lt;/b&gt; elements. Each element is equal to 0 (the default value). Next, we should make explicit initialization of elements.&lt;/p&gt;&#10;   &lt;p&gt;It's possible to separate declaration and instantiation in two lines:&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] numbers;&#10;numbers = new int[n];&lt;/code&gt;&lt;/pre&gt; &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Also, we can write the keyword &#10;   &lt;b&gt;new&lt;/b&gt; and enumerate all elements of an array:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;float[] floatNumbers; // declaration &#10;floatNumbers = new float[] { 1.02f, 0.03f, 4f } // instantiation and initialization&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;&lt;b&gt;Where to place []?&lt;/b&gt;&lt;/p&gt;&#10;   &lt;p&gt;Another feature associated with the creating of arrays is the location of characters [].&lt;br&gt;&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;char[] chars1 = new char[n]; // [] after the type&#10;char chars2[] = new char[n]; // [] after the variable&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;Often, Java developers use the first way because it signals that an array is a special type.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;b&gt; &lt;/b&gt;&lt;b&gt;The length of an array&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;To obtain the length of an existing array we should write &lt;b&gt;arrayName.length&lt;/b&gt;. It returns the length of the array. Here is an example:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] array = { 1, 2, 3, 4 }; // an array of numbers&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;int length = array.length; // number of elements of the array&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;System.out.println(length); // 4&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Accessing elements&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The values of elements of an array can be changed. To set (get) a value to (from) array the index is used.&lt;/p&gt;&#10;  &lt;p&gt;Set the value by the index:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;array[index] = val;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Get the value by the index&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;val = array[index];&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Indexes of an array have numbers from &lt;b&gt;0&lt;/b&gt; to &lt;b&gt;length - 1&lt;/b&gt; inclusive.&lt;/p&gt;&#10;  &lt;p&gt;Let's see an example.&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int numbers[] = new int[3]; // numbers: [0, 0, 0]&#10;numbers[0] = 1; // numbers: [1, 0, 0]&#10;numbers[1] = 2; // numbers: [1, 2, 0]&#10;numbers[2] = numbers[0] + numbers[1]; // numbers: [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Some explanations:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;in the first line, the integer array named &lt;b&gt;numbers&lt;/b&gt; with the size 3 is created. By default, all elements are equal to 0;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;in the second line, the value &quot;1&quot; is assigned to the first element of the array by its index (do not forget, the first element has the index 0);&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;in the third line, the value &quot;2&quot; is assigned to the second element of the array by its index (numbers[1] - is the second element);&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;in the last line, the sum of first two elements is assigned to the third element by its index.&lt;br&gt;&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;Note, if we try to access a non-existing element by an index then a runtime exception happens.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;For instance, let's try to get fourth element (with index 3) of the considered array &lt;b&gt;numbers&lt;/b&gt;.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int elem = numbers[3];&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The program throws &lt;b&gt;ArrayIndexOutOfBoundsException.&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;Be careful with indexes when accessing elements of an array.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;The utility class Arrays&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The class provides a lot of useful methods for processing arrays.&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;convert array to string using &lt;b&gt;&lt;/b&gt;Arrays.toString(...)&lt;b&gt;&lt;/b&gt; and then print it:&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;pre&gt;&lt;code&gt;byte[] famousNumbers = { 0, 1, 2, 4, 8, 16, 32, 64 };&#10;System.out.println(Arrays.toString(famousNumbers)); // it prints [0, 1, 2, 4, 8, 16, 32, 64]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt; &#10;   &lt;ul&gt;&#10;    &lt;li&gt;sorting a whole array or a part of it:&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;long[] bigNumbers = { 20000000000L, 40000000000L, 10000000000L, 30000000000L }; // it's unsorted&#10;Arrays.sort(bigNumbers); // sorting whole array&#10;// it prints [10000000000, 20000000000, 30000000000, 40000000000]&#10;System.out.println(Arrays.toString(bigNumbers));&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;ul&gt;&#10;    &lt;li&gt;comparing arrays: two arrays are equal if they contain the same elements in the same order:&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] numbers1 = { 1, 2, 5, 8 };&#10;int[] numbers2 = { 1, 2, 5 };&#10;int[] numbers3 = { 1, 2, 5, 8 };&#10;System.out.println(Arrays.equals(numbers1, numbers2)); // it prints &quot;false&quot;&#10;System.out.println(Arrays.equals(numbers1, numbers3)); // it prints &quot;true&quot;&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;ul&gt;&#10;    &lt;li&gt;filling a whole array or a part of it by some values:&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;   &lt;pre&gt;&lt;code&gt;int size = 10;&#10;char[] characters = new char[size];&#10;// It takes an array, start index, end index (exclusive) and the value for filling the array&#10;Arrays.fill(characters, 0, size / 2, 'A'); &#10;Arrays.fill(characters, size / 2, size, 'B');&#10;System.out.println(Arrays.toString(characters)); // it prints [A, A, A, A, A, B, B, B, B, B]&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#10;   &lt;p&gt;Of course, the class contains a lot of other useful methods, including array copying, binary search in sorted array and so on. For details see here: &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html&lt;/a&gt;.&lt;/p&gt;&#10;   &lt;p&gt;The Arrays class will be still considered in other subjects.&lt;/p&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294374" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283404000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="char[] array = { 'a', 'b', 'c', 'd' };" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="char[] array = new char[1];" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="char[] array = new char[0];" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="char[] array = new char[-1];" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="char[] array = new char[10000000000000];" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Select all ways to create an array which can be successfully compiled.&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294380" />
                      <option name="index" value="2" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list>
                          <option value="0" />
                          <option value="1" />
                          <option value="2" />
                          <option value="3" />
                        </list>
                      </option>
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Processing arrays using loops&lt;/h2&gt;&#10;  &lt;div&gt;&#10;   Often, it's needed to perform some kind of algorithms on the elements of an array. For instances: sort them, find the maximum element, print only positive numbers, reverse the order, calculate the arithmetic average of numbers and so on.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;A convenient way to process an array is to iterate over the array using a loop. The property &lt;b&gt;length&lt;/b&gt; of an array can help us to avoid &lt;b&gt;ArrayIndexOutOfBoundsException&lt;/b&gt;.&lt;/p&gt;&#10;   &lt;p&gt;&lt;b&gt;Example 1.&lt;/b&gt; Filling an array with the squares of indexes.&lt;br&gt;&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int n = 10; // the size of an array&#10;int[] squares = new int[n]; // creating an array with the specified size&#10;System.out.println(Arrays.toString(squares)); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]&#10;/* iterating over the array */&#10;for (int i = 0; i &amp;lt; squares.length; i++) {&#10;    squares[i] = i * i; // set the value by the element index &#10;}&#10;System.out.println(Arrays.toString(squares)); // [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;&lt;b&gt;Some explanations.&lt;/b&gt; In the code above an array with the size 10 is created (filled with 0). Then each element of the array is set to the square of the element's index. Then the array is output to the standard output.&lt;/p&gt;&#10;   &lt;p&gt;&lt;b&gt;Example 2.&lt;/b&gt; Checking the order of elements.&lt;br&gt;&lt;/p&gt;&#10;   &lt;p&gt;The following program checks the given array is sorted ascending and prints &quot;OK&quot;, otherwise it prints &quot;BROKEN&quot;.&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int[] numbers = { 1, 2, 3, 4, 5, 10, 6 }; // the order is broken&#10;boolean broken = false; // suppose the array is well-ordered&#10;/* iterating over the array */&#10;for (int i = 1; i &amp;lt; numbers.length; i++) {&#10;    &#10;    if (numbers[i] &amp;lt; numbers[i - 1]) { // if the order is broken&#10;&amp;nbsp; &amp;nbsp;     broken = true; // write a result&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;         // terminate the loop&#10;&amp;nbsp; &amp;nbsp; }&#10;}&#10;System.out.println(broken ? &quot;BROKEN&quot; : &quot;OK&quot;);&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;For the given array the program prints &quot;BROKEN&quot;.&lt;/p&gt;&#10;   &lt;p&gt;To iterate over arrays while and do-while loops are also admissible, but they are used less often.&lt;/p&gt;&#10;   &lt;h2 style=&quot;text-align: center;&quot;&gt;Reading an array from the standard input&lt;/h2&gt;&#10;   &lt;p&gt;Using a loop we can read all elements of an array from the standard input.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;For example, the input consists of two lines. The first line contains the length of an array, the second line - all elements of the array.&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;5&#10;101 102 504 302 881&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;Let's read these numbers using the &lt;b&gt;Scanner&lt;/b&gt; (you can use another tool for reading) and then output all read numbers.&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.util.Scanner;&#10;import java.util.Arrays;&#10;public class ReadingArrayExample {&#10;&amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; public static void main(String args[]) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Scanner scanner = new Scanner(System.in);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int len = scanner.nextInt(); // reading a length&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int[] array = new int[len];  // creating an array with the specified length&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (int i = 0; i &amp;lt; len; i++) {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; array[i] = scanner.nextInt(); // read the next number of the array&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(Arrays.toString(array)); // output the array&#10;&amp;nbsp; &amp;nbsp; }&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;p&gt;The program outputs:&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;[101, 102, 504, 302, 881]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#10;   &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;Iterating over arrays using the for-each loop&lt;/h2&gt;&#10;   &lt;p&gt;Since Java 5 there is a special kind of the for loop called &lt;b&gt;for-each&lt;/b&gt;. It is a special kind of the &lt;b&gt;for-loop &lt;/b&gt;that&lt;b&gt; &lt;/b&gt;iterates arrays and collections (they will be learned in other topics) without using indexes.&lt;/p&gt;&#10;   &lt;p&gt;Let's write a code for calculating the number of &lt;b&gt;'a'&lt;/b&gt; letter in the given character array. To iterate over the array we'll use &lt;b&gt;for-each&lt;/b&gt; loop.&lt;/p&gt;&#10;   &lt;pre&gt;&lt;code&gt;char[] characters = { 'a', 'b', 'c', 'a', 'b', 'c', 'a' };&#10;int counter = 0;&#10;for (char ch : characters) {&#10;    if (ch == 'a') {&#10;&amp;nbsp; &amp;nbsp;     counter++;&#10;&amp;nbsp; &amp;nbsp; }&#10;}&#10;System.out.println(counter); // it outputs &quot;3&quot;&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;br&gt;As you can see, the absence of indexes makes the code more readable. It also allows you to avoid &#10;   &lt;b&gt;ArrayIndexOutOfBoundsException&lt;/b&gt;.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294382" />
                      <option name="index" value="3" />
                      <option name="name" value="Theory (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   Write a program that reads an unsorted array of integers and two numbers &#10;   &lt;b&gt;n&lt;/b&gt; and &#10;   &lt;b&gt;m&lt;/b&gt;. The program must check if &#10;   &lt;b&gt;n&lt;/b&gt; and &#10;   &lt;b&gt;m&lt;/b&gt; occur next to each other in the array (in any order).&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Input data format&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The first line contains the size of an array.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The second line contains elements of the array.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The third line contains two integer numbers &#10;   &lt;b&gt;n&lt;/b&gt; and &#10;   &lt;b&gt;m&lt;/b&gt;.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   All numbers in the same line are separated by the space character.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;Output data format&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Only a single value: &#10;   &lt;b&gt;true&lt;/b&gt; or &#10;   &lt;b&gt;false&lt;/b&gt;.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;1 3 2&lt;br&gt;2 3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;true&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294381" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that read an array of ints and finds the index of the first maximum in an array.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The first line contains the number of elements in the array.&lt;/p&gt;&#10;  &lt;p&gt;The second line contains the array elements separated by spaces.&lt;/p&gt;&#10;  &lt;p&gt;An array always has at least one element.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;Only a single integer value - the index of the first maximum.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;2 5 3 4 5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294383" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads an array of ints and outputs the maximum pairwise product in the given array of non-negative numbers. &lt;/p&gt;&#10;  &lt;p&gt;If the array has only one element then output the element.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The first line of the input contains the number of elements in the array. &lt;/p&gt;&#10;  &lt;p&gt;The second line contains the elements of the array separated by spaces. &lt;/p&gt;&#10;  &lt;p&gt;The array always has at least one element.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;5 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;15&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294385" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads an array of ints named &lt;code&gt;A&lt;/code&gt; and cyclically shift the elements of the array to the right: &lt;code&gt;A[0]&lt;/code&gt; goes to the place of &lt;code&gt;A[1]&lt;/code&gt;, &lt;code&gt;A[1]&lt;/code&gt; - to the place of &lt;code&gt;A[2]&lt;/code&gt;, ..., and the last element goes to the place of &lt;code&gt;A[0]&lt;/code&gt;).&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;The first line of the input contains the number of elements in the array. The second line – the elements of the array.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The single line contains all shifted elements of the array. Elements must be separated by the space character.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;1 2 3 4 5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;5 1 2 3 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294384" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283405000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77922" />
                <option name="index" value="7" />
                <option name="name" value="String" />
                <option name="updateDate" value="1521291121000" />
                <option name="unitId" value="54774" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;The String type&lt;/h2&gt;&#10;  &lt;p&gt;&lt;b&gt;String&lt;/b&gt; is a reference type consisting of characters. Remember, it's not a primitive type. It is one of the most widely used types in Java.&lt;/p&gt;&#10;  &lt;p&gt;Here is an example of a string: &lt;b&gt;&quot;Hello, Java&quot;&lt;/b&gt;. This string is a sequence of 11 characters, including one space.&lt;/p&gt;&#10;  &lt;p&gt;This type has some features:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;&lt;b&gt;immutable type&lt;/b&gt;: it's impossible to change a character in a string;&lt;/li&gt;&#10;   &lt;li&gt;it has methods for getting individual characters and substrings;&lt;/li&gt;&#10;   &lt;li&gt;characters can be accessed by indexes, the first character has the index &lt;b&gt;0&lt;/b&gt;, the last one - &lt;b&gt;the length of the string - 1&lt;/b&gt;.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Creating strings&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;A string literal is surrounded by a pair of double quotes, for instance:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String simpleString = &quot;It is a simple string&quot;; // a simple string&#10;System.out.println(simpleString);  // it prints &quot;It is a simple string&quot;&#10;String anotherString = &quot;This is\nanother\nstring&quot;; // a string with escape sequences&#10;System.out.println(anotherString); // it prints the result is several lines&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;A string can represent a long character sequence (text). A string can have one or zero characters.&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String strangeText = &quot;aaaaaaaaaaaassssssssssss gggggggggggggggggggg ddddddddddd qqqqqq ffff&quot;;&#10;String emptyString = &quot;&quot;;&#10;String s = &quot;s&quot;; // a string consisting of one character&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;A string can be &lt;b&gt;null&lt;/b&gt;. It means no any value assigned.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String nullString = null; // it is null&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Another way to create a variable of type String is used the keyword &lt;b&gt;new&lt;/b&gt;.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str = new String(&quot;my-string&quot;); // it creates an object and assigns it to the variable&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Get the length and characters of a string&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;p&gt;Any string has two useful methods:&lt;br&gt;&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;&lt;b&gt;length()&lt;/b&gt; returns the number of characters in the string;&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;charAt(index)&lt;/b&gt; returns a character by its index;&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;Here is an example:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String s = &quot;Hi, all&quot;;&#10;int len = s.length(); // the len is 7&#10;char theFirstChar = s.charAt(0);  // 'H' has the index 0&#10;char theFifthChar = s.charAt(4); // 'a' has the index 4&#10;char theLastChar = s.charAt(s.length() - 1); // 'l' has the index 6&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Note, you can easily get a character of a string by the index, but you can't change characters because strings are immutable in Java.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;h2 style=&quot;text-align: center;&quot;&gt;Useful methods of strings&lt;br&gt;&lt;/h2&gt;&#10;   &lt;div&gt;&#10;    The standard library of Java provides a lot of useful methods for processing strings:&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;div&gt;&#10;     &lt;ul&gt;&#10;      &lt;li&gt;&lt;b&gt;isEmpty()&lt;/b&gt; returns &lt;b&gt;true&lt;/b&gt; if the string is empty, otherwise - &lt;b&gt;false&lt;/b&gt;;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;toUpperCase()&lt;/b&gt; returns a new string in uppercase;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;toLowerCase()&lt;/b&gt; returns a new string in lowercase;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;startsWith(prefix)&lt;/b&gt; returns &lt;b&gt;true&lt;/b&gt; if the string is start with the given string prefix, otherwise - &lt;b&gt;false&lt;/b&gt;;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;contains(...)&lt;/b&gt; returns &lt;b&gt;true&lt;/b&gt; if the string contains the given string or character;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;substring(beginIndex, endIndex)&lt;/b&gt; returns a substring of the string in the range: &lt;b&gt;beginIndex&lt;/b&gt;, &lt;b&gt;endIndex - 1&lt;/b&gt;;&lt;/li&gt;&#10;      &lt;li&gt;&lt;b&gt;replace(old, new)&lt;/b&gt; returns a new string obtained by replacing all occurrences of &lt;b&gt;old&lt;/b&gt; with &lt;b&gt;new&lt;/b&gt; that can be chars or strings.&lt;/li&gt;&#10;     &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     &lt;br&gt;&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     See the following example to better understand these methods:&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String text = &quot;The simple text string&quot;;&#10;boolean empty = text.isEmpty(); // false&#10;String textInUpperCase = text.toUpperCase(); // &quot;THE SIMPLE TEXT STRING&quot;&#10;boolean startsWith = simple.startsWith(&quot;THE&quot;); // true&#10;/* replace all whitespaces with empty strings */&#10;String noWhitespaces = text.replace(&quot; &quot;, &quot;&quot;); // &quot;THESIMPLETEXTSTRING&quot;&lt;/code&gt;&lt;/pre&gt;&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     &lt;br&gt;&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     Listed methods can take different arguments. See &#10;     &lt;a href=&quot; https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; for details.&#10;    &lt;/div&gt;&#10;    &lt;div&gt;&#10;     &lt;br&gt;&#10;    &lt;/div&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Exceptions when processing strings&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   When working with strings, there can be several exceptions.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;1. NullPointerException.&lt;/b&gt; If a string is &#10;   &lt;b&gt;null&lt;/b&gt; and you call a method of the string, it throws &#10;   &lt;b&gt;NullPointerException&lt;/b&gt;.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String s = null;&#10;int length = s.length(); // it throws NullPointerException&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;b&gt;2. StringIndexOutOfBoundsException.&lt;/b&gt; If you try to access a non-existing character by an index then this exception occurs.&#10;   &lt;em&gt;&lt;/em&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String s = &quot;ab&quot;;&#10;char c = s.charAt(2); // it throws StringIndexOutOfBoundsException&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Be careful.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;Concatenating strings&lt;/h2&gt;&#10;  &lt;p&gt;Two string can be concatenated using the &quot;+&quot; operator or the &lt;b&gt;concat&lt;/b&gt; method. In both cases, the result is the same.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String firstName = &quot;John&quot;;&#10;String lastName = &quot;Smith&quot;;&#10;// concatenation using the &quot;+&quot; operator&#10;String fullName1 = firstName + &quot; &quot; + lastName; // &quot;John Smith&quot;&#10;// concatenation using the concat method &#10;String fullName2 = firstName.concat(&quot; &quot;).concat(lastName); // &quot;John Smith&quot;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;When we concatenate two strings a new string is created (because strings are immutable).&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Important: &lt;/b&gt;in the general case &lt;b&gt;str1 + str2&lt;/b&gt; is not the same as &lt;b&gt;str2 + str1&lt;/b&gt; because the concatenation is not a commutative operation.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Appending values to a string&lt;br&gt;&lt;/h2&gt;&#10;  &lt;p&gt;It's possible to add values of different types to a string. The value will be automatically converted to a string. See an example below.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str = &quot;str&quot; + 10 + false; // the result is &quot;str10false&quot;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;In the example above, the order of execution is:&lt;/p&gt;&#10;  &lt;ol&gt;&#10;   &lt;li&gt;&quot;str&quot; + 10 =&amp;gt; &quot;str10&quot;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;&quot;str10&quot; + false = &quot;str10false&quot;&lt;br&gt;&lt;/li&gt;&#10;  &lt;/ol&gt;&#10;  &lt;p&gt;Let's see more complex example:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String shortString = &quot;str&quot;;&#10;long number = 100;&#10;String result1 = shortString + number + 50; // the result is &quot;str10050&quot;&#10;String result2 = number + 50 + shortString; // what is the result2?&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The &lt;b&gt;result2&lt;/b&gt; is &lt;b&gt;150str&lt;/b&gt;, because, first, we calculate a sum of &lt;b&gt;number&lt;/b&gt; and &lt;b&gt;50&lt;/b&gt; and then &lt;b&gt;concat&lt;/b&gt; it with &lt;b&gt;str&lt;/b&gt;. The order of operations is important.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;How to compare strings correctly?&lt;/h2&gt;&#10;  &lt;p&gt;The strings are a reference type you shouldn't compare them using &lt;b&gt;&quot;==&quot; &lt;/b&gt;or &lt;b&gt;&quot;!=&quot;&lt;/b&gt; operators. In these case, only addresses will be compared, but not actual values.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;A string has two convenient methods for comparing it with other strings: &lt;b&gt;equals(other)&lt;/b&gt; and &lt;b&gt;equalsIgnoreCase&lt;/b&gt;&lt;b&gt;(other)&lt;/b&gt;. See an example below.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String first = &quot;first&quot;;&#10;String second = &quot;second&quot;;&#10;String anotherFirst = &quot;first&quot;;&#10;String secondInUpperCase = &quot;SECOND&quot;;&#10;System.out.println(first.equals(second)); // false, the strings have different values&#10;System.out.println(first.equals(anotherFirst)); // true, the strings have the same value&#10;System.out.println(second.equals(secondInUpperCase)); // false, the strings have different cases&#10;System.out.println(second.equalsIgnoreCase(secondInUpperCase)); // true, it ignores cases&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Do not forget the rules when comparing strings.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294375" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283602000" />
                    </TheoryTask>
                    <TheoryTask>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Strings and arrays&lt;/h2&gt;&#10;  &lt;p&gt;Sometimes, a string looks similar to an array of characters.&lt;/p&gt;&#10;  &lt;p&gt;It's possible to convert between strings and character arrays using special methods:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;char[] chars = { 'A', 'B', 'C', 'D', 'E', 'F' };&#10;String stringFromChars = String.valueOf(chars); // &quot;ABCDEF&quot;&#10;char[] charsFromString = stringFromChars.toCharArray(); // { 'A', 'B', 'C', 'D', 'E', 'F' }&#10;String theSameString = new String(stringFromChars); // &quot;ABCDEF&quot;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   A string can be separated by delimiters to an array of strings. To perform this, call the method &#10;   &lt;b&gt;split&lt;/b&gt;.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String text = &quot;a long text&quot;;&#10;String[] parts = text.split(&quot; &quot;); // [a, long, text]&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The method also can take a regular expression.&#10;  &lt;/div&gt;&#10;  &lt;b&gt;&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;/h2&gt;&lt;/b&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Iterating over a string&lt;/h2&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    It's possible to iterate over characters of a string using a loop &#10;    &lt;b&gt;(while&lt;/b&gt;, &#10;    &lt;b&gt;do-while&lt;/b&gt;, &#10;    &lt;b&gt;for-loop).&lt;/b&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    See the following example.&#10;    &lt;br&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String scientistName = &quot;Isaac Newton&quot;;&#10;for (int i = 0; i &amp;lt; scientistName.length(); i++) {&#10;    System.out.print(scientistName.charAt(i) + &quot; &quot;); // print the current character&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;    &lt;p&gt;The code outputs:&lt;/p&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;I s a a c   N e w t o n&lt;/code&gt;&lt;/pre&gt;&#10;    &lt;p&gt;If you'd like to use the &lt;b&gt;for-each&lt;/b&gt; loop, first you should convert a string to an array of characters and iterate it.&lt;br&gt;&lt;/p&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str = &quot;strings are not primitive types!&quot;;&#10;int count = 0;&#10;for (char ch : str.toCharArray()) {&#10;    if (ch == ' ') {&#10;&amp;nbsp; &amp;nbsp;     count++;&#10;&amp;nbsp; &amp;nbsp; }&#10;}&#10;System.out.println(count); // 4&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;/div&gt;&#10;   &lt;br&gt;&#10;   &lt;div&gt;&#10;    The code above counts and prints the number of spaces in &#10;    &lt;b&gt;str&lt;/b&gt;. The result is 4.&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294387" />
                      <option name="index" value="2" />
                      <option name="name" value="Theory (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283602000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Paul loves to ride public transport and after receiving the ticket, he immediately checks whether he got the lucky one. A ticket is considered a lucky one if the sum of the first three numbers in this ticket matches the sum of the last three numbers in the same ticket.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;However, Paul does not count well in head that is why he asks you to write the program, which will check the equality of the sums and display &quot;Lucky&quot; if the sums match, and &quot;Regular&quot; if the sums differ.&lt;/p&gt; &#10;  &lt;p&gt;A string of six digits is provided as input to the program.&lt;/p&gt; &#10;  &lt;p&gt;You need to print out only the word &lt;b&gt;&quot;Lucky&quot;&lt;/b&gt; or &lt;b&gt;&quot;Regular&quot;&lt;/b&gt; with a capital letter (without quotes).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;090234&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Lucky&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294389" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283603000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In the given string find the first longest word and output it.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Input data&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Given a string in a single line. Words in the string are separated by a single space.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output data&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Output the longest word. If there are several such words, you should output the one, which occurs earlier.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;one two three four five six&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;three&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294392" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283603000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads a string and checks whether it is a palindrome, i.e. it reads the same both left-to-right and right-to-left. &lt;/p&gt;&#10;  &lt;p&gt;The program must output &lt;b&gt;“yes”&lt;/b&gt; if the string is a palindrome and &lt;b&gt;“no”&lt;/b&gt; otherwise.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;kayak&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;yes&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294390" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283603000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;a href=&quot;https://en.wikipedia.org/wiki/GC-content&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;GC-content&lt;/a&gt; is an important feature of the genome sequences and is defined as the percentage ratio of the sum of all guanines and cytosines to the overall number of nucleic bases in the genome sequence.&#10;   &lt;br&gt;&#10;  &lt;/div&gt; &#10;  &lt;p&gt;Write a program, which calculates the percentage of G characters (guanine) and C characters (cytosine) in the entered string. Your program should be case independent.&lt;/p&gt; &#10;  &lt;p&gt;For example, in the string &lt;b&gt;&quot;acggtgttat&quot;&lt;/b&gt; the percentage of characters G and C equals to &lt;span class=&quot;math-tex&quot;&gt;\( \dfrac4{10} \cdot 100 = 40.0 \)&lt;/span&gt;, where 4 is the number of symbols G and C, and 10 is the length of the string.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The single input line contains a sequence.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The percentage of G an C characters as a double. Do not round/format the value, output it as is.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;acggtgttat&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;40.0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294388" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283602000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Upon learning that DNA is not a random string, freshmen of the Bioinformatics Institute from the informatics group suggested using a compression algorithm that compresses repeated characters in a string.&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;Encoding is performed as follows:&lt;br&gt;The string &lt;b&gt;&quot;aaaabbсaa&quot;&lt;/b&gt; is converted into &lt;b&gt;&quot;a4b2с1a2&quot;&lt;/b&gt;, that is, the groups of the same characters of the input string are replaced by the symbol and the number of its repetitions in this string.&lt;/p&gt; &#10;  &lt;p&gt;Write a program, which reads the string, encodes it by this algorithm and outputs the encoded sequence. The encoding must &lt;b&gt;&lt;/b&gt;be&lt;b&gt;&lt;/b&gt; case sensitive.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aaaabbcaa&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;a4b2c1a2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294391" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (4)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283603000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77923" />
                <option name="index" value="8" />
                <option name="name" value="Multi-dimensional array" />
                <option name="updateDate" value="1521291128000" />
                <option name="unitId" value="54775" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;An array of arrays&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;Some structures such as matrices and tables are conveniently modeled by two-dimensional arrays. Java provides a possibility to process two and more-dimensional arrays.&lt;/p&gt;&#10;  &lt;p&gt;To create a multi-dimensional array we should use an array as an element of another array. In this case, we create an array of arrays.&lt;/p&gt;&#10;  &lt;p&gt;To iterate over multi-dimensional arrays nested loops are often used.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;2-dimensional arrays&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Here is an example that creates a two-dimensional array:&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;// two-dim array - the array of arrays&#10;int[][] twoDimArray = {&#10;        {1, 2, 3, 1}, // first array of int&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {3, 4, 1, 2}, // second array of int&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {4, 4, 1, 0}  // third array of int&#10;};&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;In this case, the length of &lt;b&gt;twoDimArray &lt;/b&gt;is 3 (because it includes 3 arrays as elements). The length of each nested array is 4.&lt;/p&gt;&#10;  &lt;p&gt;Now if you'd like to get an integer element from the array you should write two indexes:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int number = twoDimArray[0][2]; // it is 3&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;In this case, the first index specified an element (nested array or row) of &lt;b&gt;twoDimArray&lt;/b&gt;. The second index specified the element inside the nested array.&lt;/p&gt;&#10;  &lt;p&gt;Important, all nested arrays can have a different length. See an example below:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int[][] twoDimArray = new int[3][];&#10;twoDimArray[0] = new int[] { 1, 2, 3, 4 }; // the length is 4&#10;twoDimArray[1] = new int[] { 5, 7, 3};  &amp;nbsp;  // the length is 3&#10;twoDimArray[2] = new int[] { 8 };  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // the length is 1&#10;// let's output the array&#10;for (int i = 0; i &amp;lt; twoDimArray.length; i++) {&#10;    System.out.println(Arrays.toString(twoDimArray[i]));&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The code above outputs:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]&#10;[5, 7, 3]&#10;[8]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;3-dimensional arrays&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;You can create an array with more than 2 dimensional (3-dim, 4-dim, 5-dim and so on).&lt;/p&gt;&#10;  &lt;p&gt;Let's create 3-dimensional integer array:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int[][][] cubic = new int[3][4][5];&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Now, let's fill each 2D array of the 3D array cubic by the following rules: the first array must contain only &quot;1&quot;, the second - &quot;2&quot; and so on.&lt;/p&gt;&#10;  &lt;p&gt;The implementation:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;// this code fills the 3-dimensional array&#10;int current = 1;&#10;for (int[][] dim2Array : cubic) {     // for each 2-dim array&#10;&amp;nbsp; &amp;nbsp; for (int[] vector : dim2Array) {  // for each 1-dim array (vector) of 2-dim array&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Arrays.fill(vector, current); // fill the vector&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp;current++; // the next current&#10;}&#10;// this code prints all 2-dimensional arrays&#10;for (int[][] dim2Array : cubic) {&#10;    for (int[] vector : dim2Array) {&#10;&amp;nbsp; &amp;nbsp;     System.out.println(Arrays.toString(vector));&#10;&amp;nbsp; &amp;nbsp; }&#10;&amp;nbsp; &amp;nbsp; System.out.println();&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   This code prints three 2-dim arrays:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code&gt;[1, 1, 1, 1, 1]&#10;[1, 1, 1, 1, 1]&#10;[1, 1, 1, 1, 1]&#10;[1, 1, 1, 1, 1]&#10;[2, 2, 2, 2, 2]&#10;[2, 2, 2, 2, 2]&#10;[2, 2, 2, 2, 2]&#10;[2, 2, 2, 2, 2]&#10;[3, 3, 3, 3, 3]&#10;[3, 3, 3, 3, 3]&#10;[3, 3, 3, 3, 3]&#10;[3, 3, 3, 3, 3]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294376" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283839000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given the number n, not exceeding 10, and a matrix of size n × n. &lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Check whether this matrix is symmetric in relation to the main diagonal. Output the word “YES”, if it is symmetric and the word “NO” otherwise.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;0 1 2&lt;br&gt;1 2 3&lt;br&gt;2 3 4&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;YES&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294393" />
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Find the indexes of the initial appearance of the maximum element in a matrix.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;On the input, the program receives the size of matrix n and m, and then n lines having m integer numbers in each. n and m do not exceed 100.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Output two numbers: the row number and the column number, in which the greatest item in the two-dimensional array (matrix) is located. If there are several such elements, output the one, which has the smaller row number; and if row numbers are the same - the one having the smaller column number.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3 4&lt;br&gt;0 3 2 4&lt;br&gt;2 3 5 5&lt;br&gt;5 1 2 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294397" />
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Input, separated by spaces: the number of rows of the matrix, the number of columns of the matrix, then go the elements of the two-dimensional matrix itself, row by row.&lt;/p&gt; &#10;  &lt;p&gt;Output: the result of the transposition of the matrix (row by row).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 3 1 2 3 4 5 6&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 4 2 5 3 6&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294394" />
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;Fill the matrix&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;Given the number n, not greater than 100. Create the matrix of size n×n and fill it by the following rule. Numbers 0 should be stored on the primary diagonal. The two diagonals, adjacent to the primary one, should contain numbers 1. The next two diagonals - numbers 2, etc.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0 1 2 3 4&lt;br&gt;1 0 1 2 3&lt;br&gt;2 1 0 1 2&lt;br&gt;3 2 1 0 1&lt;br&gt;4 3 2 1 0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294396" />
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given a rectangle array n×m in size. Rotate it by 90 degrees clockwise, by recording the result into the new array m×n in size.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Input the two numbers n and m, not exceeding 100, and then an array n×m in size.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;Output the resulting array. Separate numbers by a single space in the output.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3 4&lt;br&gt;11 12 13 14&lt;br&gt;21 22 23 24&lt;br&gt;31 32 33 34&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;31 21 11 &lt;br&gt;32 22 12 &lt;br&gt;33 23 13 &lt;br&gt;34 24 14&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294395" />
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given a two-dimensional array (matrix) and the two numbers: i and j. Swap the columns with indices i and j within the matrix.&lt;/p&gt; &#10;  &lt;p&gt;Input contains matrix dimensions n and m, not exceeding 100, then the elements of the matrix, then the indices i and j.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3 4&lt;br&gt;11 12 13 14&lt;br&gt;21 22 23 24&lt;br&gt;31 32 33 34&lt;br&gt;0 1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;12 11 13 14&lt;br&gt;22 21 23 24&lt;br&gt;32 31 33 34&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294399" />
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given an odd number n, not exceeding 15. Create a two-dimensional array (matrix) from n×n elements, by filling it with &quot;.&quot; symbols (each element of the matrix is a string containing a single symbol). Then fill the middle row of the matrix, the middle column, and the main and the secondary diagonals with the &quot;*&quot; symbols. As a result, all &quot;*&quot;s in the array must form the star figure. Output this matrix; elements of the array should be space separated.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;* . * . *&lt;br&gt;. * * * .&lt;br&gt;* * * * *&lt;br&gt;. * * * .&lt;br&gt;* . * . *&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294398" />
                      <option name="index" value="8" />
                      <option name="name" value="Programming (6)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283840000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The cinema has n rows, each consisting of m seats (n and m do not exceed 20). The two-dimensional matrix stores the information on the sold tickets, number 1 means that the ticket for this place is already sold, the number 0 means that the place is available. You want to buy k tickets to the neighbouring seats in the same row. Find whether it can be done.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt; &#10;  &lt;p&gt;On the input, the program gets the numbers n and m. Next go n lines, each containing m numbers (0 or 1), separated by spaces. Next goes the number k.&lt;/p&gt; &#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The program should output the row number in which there are k consecutive available seats. If there are several such rows, output the number of the smallest such row. If there is no such row, output the number 0.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3 4&lt;br&gt;0 1 0 1&lt;br&gt;1 0 0 1&lt;br&gt;1 1 1 1&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294401" />
                      <option name="index" value="9" />
                      <option name="name" value="Programming (7)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283954000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Output the matrix of size &lt;span class=&quot;math-tex&quot;&gt;\( n \times n \)&lt;/span&gt;, filled by the integers from &lt;span class=&quot;math-tex&quot;&gt;\( 1 \)&lt;/span&gt; to &lt;span class=&quot;math-tex&quot;&gt;\( n^2 \)&lt;/span&gt; in a spiral, coming from the top left corner and twisted clockwise, as shown in the example (here &lt;span class=&quot;math-tex&quot;&gt;\( n=5 \)&lt;/span&gt;).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 2 3 4 5&lt;br&gt;16 17 18 19 6&lt;br&gt;15 24 25 20 7&lt;br&gt;14 23 22 21 8&lt;br&gt;13 12 11 10 9&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294402" />
                      <option name="index" value="10" />
                      <option name="name" value="Programming (8)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283954000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program, which inputs the rectangular matrix from a sequence of lines, ending with a line, containing the only word &lt;b&gt;&quot;end&quot;&lt;/b&gt; (without the quotation marks).&lt;/p&gt; &#10;  &lt;p&gt;The program should output the matrix of the same size, where each elements in the position &lt;code&gt;(i, j)&lt;/code&gt; is equal to the sum of the elements from the first matrix on the positions &lt;code&gt;(i-1, j)&lt;/code&gt;, &lt;code&gt;(i+1, j)&lt;/code&gt;, &lt;code&gt;(i, j-1)&lt;/code&gt;, &lt;code&gt;(i, j+1)&lt;/code&gt;. Boundary elements have neighbours on the opposite side of the matrix. In the case with one row or column, the element itself maybe its neighbour.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;9 5 3&lt;br&gt;0 7 -1&lt;br&gt;-5 2 9&lt;br&gt;end&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3 21 22&lt;br&gt;10 6 19&lt;br&gt;20 16 -1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294403" />
                      <option name="index" value="11" />
                      <option name="name" value="Programming (9)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521283954000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77924" />
                <option name="index" value="9" />
                <option name="name" value="Boxing" />
                <option name="updateDate" value="1521291135000" />
                <option name="unitId" value="54776" />
                <option name="items">
                  <list>
                    <TheoryTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;b&gt;Primitive and reference types&lt;/b&gt;&lt;/p&gt;&#10;  &lt;div&gt;&#10;   Remember, in Java, all data types can be divided into two categories: &#10;   &lt;b&gt;primitive types&lt;/b&gt; and &#10;   &lt;b&gt;reference types&lt;/b&gt;. &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&lt;/div&gt;&#10;  &lt;p&gt;A variable of a primitive type (&lt;b&gt;int&lt;/b&gt;, &lt;b&gt;float&lt;/b&gt;, &lt;b&gt;char&lt;/b&gt;, etc) stores the actual value. A variable of a reference type stores the address of the memory where the actual values are located.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Commonly used reference types&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The Java Class Library has a lot of useful classes which are reference types:&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;&lt;b&gt;String &lt;/b&gt;- a value that may represent a name, message, code and so on, for example: &quot;hello&quot;, &quot;John&quot;, &quot;55&quot;&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;Date, LocalDate, LocalDateTime&lt;/b&gt; - classes for processing date and time&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;BigInteger&lt;/b&gt;, &lt;b&gt;BigDecimal&lt;/b&gt; - classes for processing very big numbers&lt;/li&gt;&#10;   &lt;li&gt;&lt;b&gt;Byte&lt;/b&gt;, &lt;b&gt;Short&lt;/b&gt;, &lt;b&gt;Integer&lt;/b&gt;, &lt;b&gt;Long&lt;/b&gt;, &lt;b&gt;Character&lt;/b&gt;, &lt;b&gt;Boolean&lt;/b&gt;, &lt;b&gt;Float&lt;/b&gt;, &lt;b&gt;Double&lt;/b&gt; - wrapper classes for primitive types&lt;/li&gt;&#10;   &lt;li&gt;and so on.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;Java also has arrays. They groups values of the same type together: &lt;b&gt;int[]&lt;/b&gt;, &lt;b&gt;double[]&lt;/b&gt;, &lt;b&gt;String[]&lt;/b&gt;. An array is a reference type, even an array of primitives.&lt;/p&gt;&#10;  &lt;p&gt;The number of reference types is much larger than the primitive types. And it is continuously growing. In Java, all types created by programmers (users of the Java language) and provided by third-party libraries are reference types.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Important features of reference types&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;Despite a large number of different reference types, they have several common features.&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;objects of many reference types can be created using the keyword &lt;b&gt;new&lt;/b&gt;;&lt;b&gt;&lt;/b&gt;&lt;/li&gt;&#10;   &lt;li&gt;a variable of a reference type can be assigned a special value &lt;b&gt;null&lt;/b&gt;;&lt;/li&gt;&#10;   &lt;li&gt;it's possible to assign the same reference to several variables with suitable types;&lt;/li&gt;&#10;   &lt;li&gt;when you compare two variables of reference types using &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;, the program compares references, not actual values;&lt;/li&gt;&#10;   &lt;li&gt;calling methods of an object.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;&lt;b&gt;The keyword &quot;new&quot;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The keyword &lt;b&gt;new&lt;/b&gt; creates an object of a reference type.&lt;/p&gt;&#10;  &lt;p&gt;Let's create a string and assign it to the variable &lt;b&gt;str&lt;/b&gt;:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;String str = new String(&quot;hello&quot;); // creating an object and assigning it to the variable&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Also, we can write in two lines:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str; // declaration of the variable&#10;str = new String(&quot;hello&quot;); // initialization&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;The &quot;null&quot; value&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The default value for a variable of a reference type is &lt;b&gt;null&lt;/b&gt;. It's a keyword and a special value that represents &lt;b&gt;null-address&lt;/b&gt; (actual value is not stored anywhere).&lt;/p&gt;&#10;  &lt;p&gt;Here is an example:&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;String str = null;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The &lt;b&gt;null&lt;/b&gt; value can be assigned to any reference type, but it's impossible to assign &lt;b&gt;null &lt;/b&gt;to primitive variables.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;/pre&gt;&#10;  &lt;pre&gt;&lt;code&gt;int n = null; // compile-time error&lt;/code&gt;&lt;/pre&gt;If you forgot to initialize a variable of a reference type, it's &#10;  &lt;b&gt;null&lt;/b&gt;:&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str; // it's null&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;Be careful, it may cause &#10;   &lt;b&gt;NullPointerException&lt;/b&gt; in further.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;b&gt;Reference reassigning&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;If you have a reference variable and will assign it to another reference variable then both variables will have an address of the same actual value. Also, they can modify this value together if the type is &lt;b&gt;mutable&lt;/b&gt;.&lt;/p&gt;&#10;  &lt;p&gt;See the following example.&lt;/p&gt;&#10;  &lt;p&gt;1) Let's create an array of three integer numbers:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;int[] array = new int[3];&#10;Arrays.fill(array, 10); // it fills array with 10&#10;System.out.println(&quot;The array: &quot; + Arrays.toString(array)); // it prints [10, 10, 10]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;br&gt;2) Assign the address of array elements to another variable, then change one element in another array.&#10;  &lt;br&gt;&#10;  &lt;pre&gt;&lt;code&gt;int[] another = array; // assign the address to another array&#10;another[1] = 5;        // set the element with index 1 the value 5&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;3) As you can see, data changing is visible in both array variables:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;System.out.println(&quot;Another: &quot; + Arrays.toString(another)); // it prints [10, 5, 10]&#10;System.out.println(&quot;The array: &quot; + Arrays.toString(array)); // it prints [10, 5, 10]&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;Do not forget, a variable of a reference type stores an address, not actual value. Several variables can have the same address of the actual value and modify the value together.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;&lt;b&gt;Comparing references and values&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;During the work with reference types, the operations &quot;==&quot; and &quot;!=&quot; compares variables by the addresses, not actual values. This behavior is completely different from comparing primitive types.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;If we'd like to compare two variables by actual value, use the method &lt;b&gt;equals&lt;/b&gt; that takes another variable. Any variable of a reference type has the method.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;For example, let's consider a class BigInteger. The objects of this class is a very long numbers, consisting of an arbitrary number of digits.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;Let's create several such numbers and compare them using &quot;==&quot; and the method &lt;b&gt;equals&lt;/b&gt;. See the example below.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;BigInteger big1 = new BigInteger(&quot;10000000000000000000&quot;); // the first big number&#10;BigInteger big2 = new BigInteger(&quot;10000000000000000000&quot;); // the second big number&#10;BigInteger big3 = new BigInteger(&quot;22222222222222222222&quot;); // the third big number&#10;System.out.println(big1 == big2);  &amp;nbsp; &amp;nbsp; // false, because they have different addresses&#10;System.out.println(big1.equals(big2)); // true, because they have the same value&#10;System.out.println(big1 != big3);  &amp;nbsp; &amp;nbsp; // true, because they have different addresses&#10;System.out.println(big1.equals(big3)); // false, because they have different values&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p style=&quot;text-align: left;&quot;&gt;Remember forever distinctions when comparing variables of reference types by &quot;&lt;b&gt;==&lt;/b&gt;&quot; and &lt;b&gt;equals&lt;/b&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294377" />
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284148000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="an actual value" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="nothing" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="a pointer to an object" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="the address of an object" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  What does a reference type store?&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294408" />
                      <option name="index" value="2" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284149000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="NULL" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="nil" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="NaN" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Null" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="null" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Select all correct syntax for null.&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294404" />
                      <option name="index" value="3" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284149000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Both lines can be compiled and no any exceptions here." />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="The first line is compiled, the second line can't be compiled." />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Both lines can't be compiled." />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Both lines can be compiled, but first one throws NullPointerException." />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="The first line can't be compiled, the second line is compiled." />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;What can you say about the code below?&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code&gt;String s = (String) null;   // (1)&#10;int i = (int) null;         // (2)&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294406" />
                      <option name="index" value="4" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (2)" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284149000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Wrapper classes&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/h2&gt;&#10;  &lt;p&gt;Each primitive data type has a class dedicated to it. These classes are known as wrappers. They are reference types and wrap values of primitive types.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Let's consider the table below with primitive types and their corresponding wrapper classes.&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;image-fullsize&quot; height=&quot;298&quot; src=&quot;https://ucarecdn.com/be1a74f1-64d4-4aa6-86e9-bfe634098511/&quot; width=&quot;563&quot;&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;b&gt;The table with primitive types and the corresponding wrappers&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;As you can see Java provides eight wrapper classes: one for each primitive type. The third column will be considered later.&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Boxing and unboxing&lt;/h2&gt;&#10;  &lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;b&gt;&lt;/b&gt;Boxing&lt;b&gt;&lt;/b&gt;&lt;i&gt;&lt;/i&gt; is the conversion between the primitive types and their corresponding object wrapper classes.&lt;/p&gt;&#10;  &lt;p&gt;Unboxing&lt;b&gt;&lt;/b&gt;&lt;i&gt;&lt;/i&gt; is the reverse process.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;int primitive = 100;&#10;Integer reference = Integer.valueOf(primitive); // boxing&#10;int anotherPrimitive = reference.intValue();    // unboxing&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;Autoboxing and auto-unboxing&lt;b&gt;&lt;/b&gt; are the automatic conversions performed by java compiler.&lt;/p&gt;&#10;  &lt;pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;double primitiveDouble = 10.8;&#10;Double wrapperDouble = primitiveDouble; // autoboxing&#10;double anotherPrimitiveDouble = wrapperDouble;  // auto-unboxing&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&#10;  &lt;div&gt;&#10;   Also, it's possible to create an array of Long enumerating primitive values:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;pre&gt;&lt;code&gt;Long[] array = { 1L, 2L, 3L, 4L };&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&lt;/div&gt;&#10;  &lt;div&gt;&#10;   There is one possible problem when unpacking. If the wrapper object is null, the unpacking throws the &#10;   &lt;b&gt;NullPointerException.&lt;/b&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;pre&gt;&lt;code&gt;Long longVal = null;&#10;long primitiveLong = longVal; // it throws NullPointerException (NPE)&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;b&gt;&lt;/b&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Constructing wrappers based on other types&lt;/h2&gt;&#10;  &lt;p&gt;The wrapper classes have constructors for creating objects from other types. For instance, an object of a wrapper class can be created from a string (except the Character).&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Integer number = new Integer(&quot;10012&quot;);   // an Integer from the string &quot;10012&quot;&#10;Float f = new Float(&quot;0.01&quot;);             // a Float from the sting &quot;0.01&quot;&#10;Long longNumber = new Long(&quot;100000000&quot;); // a Long from the string &quot;100000000&quot;&#10;Boolean boolVal = new Boolean(&quot;true&quot;);   // a Boolean from the string &quot;true&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&#10;  &lt;p&gt;You can see the complete list of constructors in the picture above.&lt;/p&gt;&#10;  &lt;p&gt;Also, you can create wrapper objects using special methods:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Long longVal = Long.parseLong(&quot;1000&quot;);      // a Long from the string &quot;1000&quot;&#10;Long anotherLongVal = Long.valueOf(&quot;2000&quot;); // another Long from the string &quot;2000&quot;&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;If the input string has an invalid argument (for instance, &lt;b&gt;&quot;1d0o3&quot;&lt;/b&gt;), both of these methods throw the &lt;code&gt;NumberFormatException&lt;/code&gt;.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Primitive types vs wrapper classes&lt;/h2&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;processing values of primitive types are faster than wrapper objects;&lt;/li&gt;&#10;   &lt;li&gt;wrappers can be used in the situation if you need &quot;null&quot; as a no-value indicator;&lt;br&gt;&lt;/li&gt;&#10;   &lt;li&gt;primitive types cannot be used in collections, but wrappers can.&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Comparing wrappers&lt;/h2&gt;&#10;  &lt;p&gt;The operator &lt;code&gt;==&lt;/code&gt; checks whether two objects are actually equal, i.e. whether they actually refer to the same object in memory. The method &lt;code&gt;equals&lt;/code&gt; checks whether two objects are meaningfully equal, for example, it checks whether two wrappers or strings are having the same value.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;The &lt;code&gt;==&lt;/code&gt; actually checks whether two variables are having exactly same value. Note that a primitive variable contains what you see, but a reference variable contains the address to the object that it holds. When &lt;code&gt;==&lt;/code&gt; is used to comparing a primitive to a wrapper, the wrapper will be unwrapped and the comparison will be primitive to primitive, and hence it will be true always as it is a primitive comparison and not object comparison.&lt;/p&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt; Reuse of wrapper class objects&lt;/h2&gt;&#10;  &lt;p&gt;In order to save memory, two instances of the following wrapper objects (created through boxing), will always be equal (==) when their primitive values are the same:&lt;br&gt;&lt;/p&gt;&#10;  &lt;ul&gt;&#10;   &lt;li&gt;Boolean&lt;/li&gt;&#10;   &lt;li&gt;Byte&lt;/li&gt;&#10;   &lt;li&gt;Character from \u0000 to \u007f (7f is 127 in decimal)&lt;/li&gt;&#10;   &lt;li&gt;Short and Integer from -128 to 127&lt;/li&gt;&#10;  &lt;/ul&gt;&#10;  &lt;p&gt;For example, &lt;code&gt;System.out.println(i1 == i2)&lt;/code&gt;; will print true when &lt;code&gt;i1&lt;/code&gt; and &lt;code&gt;i2&lt;/code&gt; are having same value between -128 to 127 and will print false if i1 and i2 are outside -128 to 127 range even though both are same. The cause is a range of values is stored in the special pool to reuse them in different objects.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294405" />
                      <option name="index" value="5" />
                      <option name="name" value="Theory (1)" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284149000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="choiceOptions">
                        <list>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Long val = new Long(4321);" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Long val = 4321;" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Long val = new Long(&quot;4321&quot;);" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Long val = Long.parseLong(&quot;4321&quot;);" />
                          </ChoiceOption>
                          <ChoiceOption>
                            <option name="status" value="UNKNOWN" />
                            <option name="text" value="Long val = 4321L;" />
                          </ChoiceOption>
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Select all correct ways to initialize a Long value with 4321.&#10; &lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="294407" />
                      <option name="index" value="6" />
                      <option name="messageCorrect" value="Congratulations!" />
                      <option name="messageIncorrect" value="Incorrect solution" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (3)" />
                      <option name="record" value="-1" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1521284149000" />
                    </ChoiceTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </StepikCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>